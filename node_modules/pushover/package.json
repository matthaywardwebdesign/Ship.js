{
  "name": "pushover",
  "description": "git push deploy server over http",
  "version": "0.1.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/pushover.git"
  },
  "main": "index.js",
  "keywords": [
    "git",
    "push",
    "deploy",
    "http",
    "web",
    "repository"
  ],
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "devDependencies": {
    "tap": "~0.2.5",
    "seq": "~0.3.5"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "# pushover\n\nServe up git repositories over http and accept git pushes.\n\n[![build status](https://secure.travis-ci.org/substack/pushover.png)](http://travis-ci.org/substack/pushover)\n\nThis library makes it super easy to set up custom git push deploy logic.\n\n# example\n\n``` js\nvar pushover = require('pushover');\nvar repos = pushover(__dirname + '/repos');\n\nrepos.on('push', function (repo, commit, branch) {\n    console.log(\n        'received a push to ' + repo + '/' + commit\n        + ' (' + branch + ')'\n    );\n});\n\nrepos.listen(7000);\n```\n\nthen start up the pushover server...\n\n```\n$ node example/simple.js \n```\n\nmeanwhile...\n\n```\n$ git push http://localhost:7000/beep master\nCounting objects: 356, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (133/133), done.\nWriting objects: 100% (356/356), 46.20 KiB, done.\nTotal 356 (delta 210), reused 355 (delta 210)\nTo http://localhost:7000/beep\n * [new branch]      master -> master\n\n```\n\nand then...\n\n```\n$ node example/simple.js \nreceived a push to beep/d5013a53a0e139804e729a12107fc212f11e64c3 (master)\n```\n\n# methods\n\nvar pushover = require('pushover')\n\n## var repos = pushover(repoDir, opts={autoCreate:true})\n\nCreate a new repository collection from the directory `repoDir`.\n`repoDir` should be entirely empty except for git repo directories.\n\n`repos` is an EventEmitter that emits the events listed below in the events\nsection.\n\nBy default, repository targets will be created if they don't exist. You can\ndisable that behavior with `opts.autoCreate`.\n\nIf `opts.checkout` is true, create and expected checked-out repos instead of\nbare repos.\n\n## repos.handle(req, res, next, write_messages)\n\nHandle incoming HTTP requests with a connect-style middleware.\n\nEverything is admin-party by default.\nCheck the credentials further up the stack using basic auth or whatevs.\n\nwrite_messages(default false) is used to prevent git closeStream command, so you can write custom data to git client using pushover.writeMessage\n\n## pushover.writeMessage(mes, res)\n  \n  Used to write messages to git client! You must use custom handler and end transmission with pushover.closeStream();\n\n  Note, mes is asci only!\n\n## pushover.closeStream (res)\n\n  Closes stream, used only with pushover.writeMessage and write_messages\n\n## repos.listen(...)\n\nCreate and return a new http server using `repos.handle`.\n\nAny arguments will be passed to `server.listen()`.\n\n## repos.create(repoName, cb)\n\nCreate a new bare repository `repoName` in the instance repository directory.\n\nOptionally get a callback `cb(err)` to be notified when the repository was\ncreated.\n\n## repos.list(cb) \n\nGet a list of all the repositories in the callback `cb(err, repos)`.\n\n## repos.exists(repoName, cb)\n\nFind out whether `repoName` exists in the callback `cb(exists)`.\n\n# events\n\n## repos.on('push', function (repo, commit, branch, res) { ... }\n\nEmitted when somebody does a `git push` to the repo.\n\nres is Stream from connect, which can be used to write custom messages with pushover.writeStream(string, res).\nYou must end this stream with pushover.closeStream()\n# install\n\nWith [npm](http://npmjs.org) do:\n\n    npm install pushover\n\n# license\n\nMIT\n\n# kudos\n\nReading through\n[grack](https://github.com/schacon/grack/blob/master/lib/git_http.rb)\nwas super handy.\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/pushover/issues"
  },
  "homepage": "https://github.com/substack/pushover",
  "_id": "pushover@0.1.6",
  "dist": {
    "shasum": "4cb551fe4e0aeaf3b0969a4cc2c30e23b6d60ca5"
  },
  "_from": "../pushover/"
}
